# haz esto para generar disparadores automaticos cuando se generen cambios en la rama
trigger:
  branches:
    include:
    - none

# haz esto para usar el agente hospedado por Microsoft del grupo de azure pipelines. Este es el valor por defecto si no se especifica un pool o vmImage.
pool:
  name: Azure Pipelines

# haz esto antes de tus tareas de construcción  
steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(RestoreBuildProjects)'

- task: dependency-check-build-task@6
  inputs:
    projectName: 'DemdevsecopsOWASP'
    scanPath: '**/*'
    format: 'ALL'
    reportFilename: 'owaspinforme'
    warnOnCVSSViolation: true
    enableExperimental: true
    enableRetired: true
    enableVerbose: true
- task: WhiteSource@21
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)'
    projectName: 'Demdevsecops-WhiteDemo'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'Sonar30'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'IISHostedWebApp'
    cliProjectName: 'IISHostedWebApp'
    cliSources: '.'
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

# hacer esto después de otras tareas como la construcción
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(TestProjects)'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="$(Agent.TempDirectory)/TestResults/"'
- task: SonarQubeAnalyze@5   

- script: 'dotnet tool install -g dotnet-reportgenerator-globaltool'
  displayName: 'Install Report Generator Tool'

- script: 'reportgenerator "-reporttypes:Cobertura" "-reports:$(Agent.TempDirectory)/TestResults/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/coverlet/reports"'
  displayName: 'Merge code-coverage files'

- task: PublishCodeCoverageResults@1
  displayName: 'Generate code-coverage HTML report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
    failIfCoverageEmpty: true

# Haga esto después de que sus pruebas se hayan ejecutado
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()
